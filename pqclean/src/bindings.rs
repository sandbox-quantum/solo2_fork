/* automatically generated by rust-bindgen 0.65.1 */
use cty::c_int;

pub const DILITHIUM_MODE: u32 = 5;
pub const DILITHIUM_PUBLICKEYBYTES: u32 = 2592;
pub const DILITHIUM_SECRETKEYBYTES: u32 = 4864;
pub const DILITHIUM_CRYPTO_BYTES: u32 = 4595;


pub fn pqcrystals_dilithium_crypto_sign_keypair() -> ([u8;DILITHIUM_PUBLICKEYBYTES], [u8;DILITHIUM_SECRETKEYBYTES]) {
    let mut pk = [0; DILITHIUM_PUBLICKEYBYTES];
    let mut sk = [0; DILITHIUM_SECRETKEYBYTES];
    unsafe {
        pqcrystals_dilithium_crypto_sign_keypair(&mut pk as *mut _, &mut sk as *mut _)
    }
    (pk,sk)
}


extern "C" {
    fn pqcrystals_dilithium_crypto_sign_keypair(
        pk: *mut u8,
        sk: *mut u8,
    ) -> c_int;
}
extern "C" {
    pub fn pqcrystals_dilithium_signature(
        sig: *mut u8,
        siglen: *mut usize,
        m: *const u8,
        mlen: usize,
        sk: *const u8,
    ) -> c_int;
}
extern "C" {
    pub fn pqcrystals_dilithium_crypto_sign(
        sm: *mut u8,
        smlen: *mut usize,
        m: *const u8,
        mlen: usize,
        sk: *const u8,
    ) -> c_int;
}
extern "C" {
    pub fn pqcrystals_dilithium_verify(
        sig: *const u8,
        siglen: usize,
        m: *const u8,
        mlen: usize,
        pk: *const u8,
    ) -> c_int;
}
extern "C" {
    pub fn pqcrystals_dilithium_crypto_sign_open(
        m: *mut u8,
        mlen: *mut usize,
        sm: *const u8,
        smlen: usize,
        pk: *const u8,
    ) -> c_int;
}
